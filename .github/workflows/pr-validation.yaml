name: PR Validation

on: pull_request

env:
  NAME: "gitops-promotion"

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - name: Clone repo
        uses: actions/checkout@v2.4.0
      - name: Setup go
        uses: actions/setup-go@v4
        with:
          go-version: "1.17"
      - name: Install libgit2
        run: |
          cd /tmp
          git clone https://github.com/libgit2/libgit2.git
          cd libgit2
          git checkout maint/v1.3
          mkdir build && cd build
          cmake ..
          sudo cmake --build . --target install
          sudo ldconfig
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3

  fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v2.4.0
      - name: Setup go
        uses: actions/setup-go@v4
        with:
          go-version: "1.17"
      - name: Run fmt
        run: |
          make fmt
      - name: Check if working tree is dirty
        run: |
          if [[ $(git status --porcelain) ]]; then
            git diff
            echo 'run make fmt and commit changes'
            exit 1
          fi

  # semgrep:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v1
  #     - uses: returntocorp/semgrep-action@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
  #         publishDeployment: 284

  #coverage:
  #  runs-on: ubuntu-latest
  #  steps:
  #    - name: Clone repo
  #      uses: actions/checkout@v2.4.0
  #    - name: Setup go
  #      uses: actions/setup-go@v4
  #      with:
  #        go-version: "1.17"
  #    - name: Install libgit2
  #      run: |
  #        cd /tmp
  #        git clone https://github.com/libgit2/libgit2.git
  #        cd libgit2
  #        git checkout maint/v1.3
  #        mkdir build && cd build
  #        cmake ..
  #        sudo cmake --build . --target install
  #        sudo ldconfig
  #    - name: coverage
  #      env:
  #        AZDO_PAT: ${{ secrets.AZDO_PAT }}
  #        AZDO_URL: ${{ secrets.AZDO_URL }}
  #        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  #        GITHUB_URL: ${{ secrets.GH_URL }}
  #      run: |
  #        make cover
  #    - name: Send coverage to coverall
  #      uses: shogo82148/actions-goveralls@v1
  #      with:
  #        path-to-profile: tmp/coverage.out
  #        ignore: main.go

  build-container:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v2.4.0
      - name: Prepare
        id: prep
        run: |
          VERSION=sha-${GITHUB_SHA::8}
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF/refs\/tags\//}
          fi
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
      - uses: brpaz/hadolint-action@v1.5.0
        with:
          dockerfile: Dockerfile
      - name: Cache container layers
        uses: actions/cache@v2.1.7
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
      - name: Build and load (current arch)
        run: |
          docker buildx build --load -t ${{ env.NAME }}:${{ steps.prep.outputs.VERSION }} .
      - name: Setup go
        uses: actions/setup-go@v4
        with:
          go-version: "1.17"
      - name: Install libgit2
        run: |
          cd /tmp
          git clone https://github.com/libgit2/libgit2.git
          cd libgit2
          git checkout maint/v1.3
          mkdir build && cd build
          cmake ..
          sudo cmake --build . --target install
          sudo ldconfig
      #- name: Run integration tests
      #  env:
      #    AZDO_PAT: ${{ secrets.AZDO_PAT }}
      #    AZDO_URL: ${{ secrets.AZDO_URL }}
      #    GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      #    GITHUB_URL: ${{ secrets.GH_URL }}
      #  run: |
      #    make verify GITOPS_PROMOTION_IMAGE=${{ env.NAME }}:${{ steps.prep.outputs.VERSION }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.NAME }}:${{ steps.prep.outputs.VERSION }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"
